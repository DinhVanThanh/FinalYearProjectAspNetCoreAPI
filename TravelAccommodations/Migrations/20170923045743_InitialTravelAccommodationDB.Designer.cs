// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TravelAccommodations.Enums;
using TravelAccommodations.Models;

namespace TravelAccommodations.Migrations
{
    [DbContext(typeof(TravelAccommodationDBContext))]
    [Migration("20170923045743_InitialTravelAccommodationDB")]
    partial class InitialTravelAccommodationDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TravelAccommodations.Models.Accommodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AveragePrice");

                    b.Property<int>("LocationId");

                    b.Property<string>("Name");

                    b.Property<short>("Rating");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TypeId");

                    b.ToTable("Accommodations");
                });

            modelBuilder.Entity("TravelAccommodations.Models.AccommodationCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("AccommodationCategories");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccommodationId");

                    b.Property<int>("CommentTypeId");

                    b.Property<string>("Content");

                    b.Property<int>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("CommentTypeId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("TravelAccommodations.Models.CommentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CommentGroups");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Convenience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccommodationId");

                    b.Property<string>("Name");

                    b.Property<short>("Rating");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.ToTable("Conveniences");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<int>("Gender");

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("LastName");

                    b.Property<string>("Nation");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccommodationId");

                    b.Property<string>("FileName");

                    b.Property<int?>("RoomId");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("RoomId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateTo");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccommodationId");

                    b.Property<short>("Capacity");

                    b.Property<string>("Price");

                    b.Property<int>("RegisterId");

                    b.Property<int>("RoomTypeId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.HasIndex("RegisterId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("TravelAccommodations.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccommodationId");

                    b.Property<string>("Name");

                    b.Property<short>("Rating");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Accommodation", b =>
                {
                    b.HasOne("TravelAccommodations.Models.Location", "Position")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelAccommodations.Models.AccommodationCategory", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelAccommodations.Models.Comment", b =>
                {
                    b.HasOne("TravelAccommodations.Models.Accommodation")
                        .WithMany("Comments")
                        .HasForeignKey("AccommodationId");

                    b.HasOne("TravelAccommodations.Models.CommentGroup", "Type")
                        .WithMany()
                        .HasForeignKey("CommentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelAccommodations.Models.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelAccommodations.Models.Convenience", b =>
                {
                    b.HasOne("TravelAccommodations.Models.Accommodation")
                        .WithMany("Conveniences")
                        .HasForeignKey("AccommodationId");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Image", b =>
                {
                    b.HasOne("TravelAccommodations.Models.Accommodation")
                        .WithMany("Images")
                        .HasForeignKey("AccommodationId");

                    b.HasOne("TravelAccommodations.Models.Room")
                        .WithMany("Images")
                        .HasForeignKey("RoomId");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Registration", b =>
                {
                    b.HasOne("TravelAccommodations.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");
                });

            modelBuilder.Entity("TravelAccommodations.Models.Room", b =>
                {
                    b.HasOne("TravelAccommodations.Models.Accommodation", "Accommodation")
                        .WithMany("Rooms")
                        .HasForeignKey("AccommodationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelAccommodations.Models.Registration", "Register")
                        .WithMany("Rooms")
                        .HasForeignKey("RegisterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TravelAccommodations.Models.RoomType", "Type")
                        .WithMany()
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TravelAccommodations.Models.Service", b =>
                {
                    b.HasOne("TravelAccommodations.Models.Accommodation")
                        .WithMany("Services")
                        .HasForeignKey("AccommodationId");
                });
#pragma warning restore 612, 618
        }
    }
}
